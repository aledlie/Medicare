#ui.R
library(shiny)
# Define UI for application that plots random distributions
shinyUI(pageWithSidebar(
# Application title
headerPanel("Hello Shiny!"),
# Sidebar with a slider input for number of observations
sidebarPanel(
sliderInput("obs",
"Number of observations:",
min = 2009,
max = 2013,
value = 2009)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
))
# server.R
library(shiny)
library("ggplot2")
library("lubridate")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="/Library/Java/JavaVirtualMachines/jdk1.7.0_51.jdk/Contents/Home/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_prof", "orcl_prof"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
diamonds <- dbGetQuery(jdbcConnection, "select \"carat\", \"price\", r.name, sales_date from diamonds d, diam_sale s, diam_retailer r where d.\"diamond_id\" = s.diamond_id and s.retailer_id = r.retailer_id")
dbDisconnect(jdbcConnection)
}
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
ggplot(subset(diamonds, year(SALES_DATE) == input$obs), aes(x = paste(year(SALES_DATE), month(SALES_DATE),sep="-"), y = price)) + geom_point()
})
})
# server.R
library(shiny)
library("ggplot2")
library("lubridate")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="/Library/Java/JavaVirtualMachines/jdk1.7.0_64.jdk/Contents/Home/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_prof", "orcl_prof"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
diamonds <- dbGetQuery(jdbcConnection, "select \"carat\", \"price\", r.name, sales_date from diamonds d, diam_sale s, diam_retailer r where d.\"diamond_id\" = s.diamond_id and s.retailer_id = r.retailer_id")
dbDisconnect(jdbcConnection)
}
shinyServer(function(input, output) {
output$distPlot <- renderPlot({
ggplot(subset(diamonds, year(SALES_DATE) == input$obs), aes(x = paste(year(SALES_DATE), month(SALES_DATE),sep="-"), y = price)) + geom_point()
})
})
library("knitr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
sessionInfo()
install.packages("gplots")
install.packages("tabplot")
---
output: html_document
---
Data Science Fall 2014 R Project
===
**This project analyzes the Diamonds data from the ggplot2 package which has been supplemented with additional synthetic data and stored in an Oracle database.**
###This is how my RStudio is configured:
```{r}
sessionInfo()
```
install.packages("lubridate")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("formatR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages("tidyr")
library("tidyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("yaml", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("evaluate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
options(java.parameters="-Xmx2g")
library(rJava)
library(RJDBC)
jdbcDriver <- JDBC(driverClass="oracle.jdbc.OracleDriver", classPath="/Library/Java/JavaVirtualMachines/jdk1.7.0_65.jdk/Contents/Home/ojdbc6.jar")
# In the following, use your username and password instead of "CS347_prof", "orcl_prof" once you have an Oracle account
possibleError <- tryCatch(
jdbcConnection <- dbConnect(jdbcDriver, "jdbc:oracle:thin:@128.83.138.158:1521:orcl", "C##cs347_prof", "orcl_prof"),
error=function(e) e
)
if(!inherits(possibleError, "error")){
diamonds <- dbGetQuery(jdbcConnection, "select \"carat\", \"price\", r.name, sales_date from diamonds d, diam_sale s, diam_retailer r where d.\"diamond_id\" = s.diamond_id and s.retailer_id = r.retailer_id")
dbDisconnect(jdbcConnection)
}
head(diamonds)
ggplot(data = diamonds) + geom_histogram(aes(x = carat))
ggplot(data = diamonds) + geom_density(aes(x = carat, fill = "gray50"))
ggplot(diamonds, aes(x = carat, y = price)) + geom_point()
ggplot(subset(diamonds, NAME == 'ZALE CORP' | NAME == 'TIFFANY CO'), aes(x = NAME, y = price)) + geom_point()
ggplot(subset(diamonds, year(SALES_DATE) == "2009"), aes(x = paste(year(SALES_DATE), month(SALES_DATE),sep="-"), y = price)) + geom_point()
